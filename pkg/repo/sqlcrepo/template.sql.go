// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: template.sql

package sqlcrepo

import (
	"context"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO
    templates (id, name, repo_name, dockerfile)
VALUES
    (?, ?, ?, ?) RETURNING id
`

type CreateTemplateParams struct {
	ID         string
	Name       string
	RepoName   string
	Dockerfile string
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createTemplate,
		arg.ID,
		arg.Name,
		arg.RepoName,
		arg.Dockerfile,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM templates
WHERE
    id = ?
`

func (q *Queries) DeleteTemplate(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTemplate, id)
	return err
}

const getAllTemplates = `-- name: GetAllTemplates :many
SELECT
    id,
    name,
    repo_name,
    dockerfile
FROM
    templates
`

func (q *Queries) GetAllTemplates(ctx context.Context) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, getAllTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RepoName,
			&i.Dockerfile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplate = `-- name: GetTemplate :one
SELECT
    id,
    name,
    repo_name,
    dockerfile
FROM
    templates
WHERE
    id = ?
`

func (q *Queries) GetTemplate(ctx context.Context, id string) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplate, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RepoName,
		&i.Dockerfile,
	)
	return i, err
}

const updateTemplate = `-- name: UpdateTemplate :exec
UPDATE templates
SET
    name = ?,
    repo_name = ?,
    dockerfile = ?
WHERE
    id = ?
`

type UpdateTemplateParams struct {
	Name       string
	RepoName   string
	Dockerfile string
	ID         string
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) error {
	_, err := q.db.ExecContext(ctx, updateTemplate,
		arg.Name,
		arg.RepoName,
		arg.Dockerfile,
		arg.ID,
	)
	return err
}
