// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package sqlcrepo

import (
	"context"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO
	tokens (user_id, token)
VALUES
	(?, ?)
`

type CreateTokenParams struct {
	UserID string
	Token  string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken, arg.UserID, arg.Token)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE
	token = ?
`

func (q *Queries) DeleteToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, token)
	return err
}

const getToken = `-- name: GetToken :one
SELECT
	user_id,
	token
FROM
	tokens
WHERE
	token = ?
`

type GetTokenRow struct {
	UserID string
	Token  string
}

func (q *Queries) GetToken(ctx context.Context, token string) (GetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getToken, token)
	var i GetTokenRow
	err := row.Scan(&i.UserID, &i.Token)
	return i, err
}

const getTokenByUserID = `-- name: GetTokenByUserID :many
SELECT
	user_id,
	token
FROM
	tokens
WHERE
	user_id = ?
`

type GetTokenByUserIDRow struct {
	UserID string
	Token  string
}

func (q *Queries) GetTokenByUserID(ctx context.Context, userID string) ([]GetTokenByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTokenByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTokenByUserIDRow
	for rows.Next() {
		var i GetTokenByUserIDRow
		if err := rows.Scan(&i.UserID, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
