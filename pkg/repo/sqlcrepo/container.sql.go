// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: container.sql

package sqlcrepo

import (
	"context"
	"database/sql"
)

const allocatePort = `-- name: AllocatePort :exec
UPDATE ports
SET
    in_use = 1,
    container_id = ?
WHERE
    port = ?
`

type AllocatePortParams struct {
	ContainerID sql.NullString
	Port        int64
}

func (q *Queries) AllocatePort(ctx context.Context, arg AllocatePortParams) error {
	_, err := q.db.ExecContext(ctx, allocatePort, arg.ContainerID, arg.Port)
	return err
}

const createContainer = `-- name: CreateContainer :one
INSERT INTO
    containers (
        id,
        docker_id,
        image_name,
        container_name,
        git_repo,
        user_id,
        env_vars,
        ports
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) returning id
`

type CreateContainerParams struct {
	ID            string
	DockerID      string
	ImageName     string
	ContainerName string
	GitRepo       sql.NullString
	UserID        string
	EnvVars       sql.NullString
	Ports         sql.NullString
}

func (q *Queries) CreateContainer(ctx context.Context, arg CreateContainerParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createContainer,
		arg.ID,
		arg.DockerID,
		arg.ImageName,
		arg.ContainerName,
		arg.GitRepo,
		arg.UserID,
		arg.EnvVars,
		arg.Ports,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createPort = `-- name: CreatePort :exec
INSERT INTO
    ports (port, in_use, container_id)
VALUES
    (?, 0, NULL)
`

func (q *Queries) CreatePort(ctx context.Context, port int64) error {
	_, err := q.db.ExecContext(ctx, createPort, port)
	return err
}

const deleteContainer = `-- name: DeleteContainer :exec
DELETE FROM containers
WHERE
    id = ?
`

func (q *Queries) DeleteContainer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteContainer, id)
	return err
}

const getAllContainers = `-- name: GetAllContainers :many
SELECT
    c.id,
    c.docker_id,
    c.image_name,
    c.container_name,
    c.git_repo,
    c.user_id,
    c.env_vars,
    c.ports,
    p.port as ui_port
FROM
    containers c
    JOIN ports p on p.container_id = c.id
`

type GetAllContainersRow struct {
	ID            string
	DockerID      string
	ImageName     string
	ContainerName string
	GitRepo       sql.NullString
	UserID        string
	EnvVars       sql.NullString
	Ports         sql.NullString
	UiPort        int64
}

func (q *Queries) GetAllContainers(ctx context.Context) ([]GetAllContainersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllContainers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllContainersRow
	for rows.Next() {
		var i GetAllContainersRow
		if err := rows.Scan(
			&i.ID,
			&i.DockerID,
			&i.ImageName,
			&i.ContainerName,
			&i.GitRepo,
			&i.UserID,
			&i.EnvVars,
			&i.Ports,
			&i.UiPort,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContainerByID = `-- name: GetContainerByID :one
SELECT
    c.id,
    c.docker_id,
    c.image_name,
    c.container_name,
    c.git_repo,
    c.user_id,
    c.env_vars,
    c.ports,
    p.port as ui_port
FROM
    containers c
    JOIN ports p on p.container_id = c.id
WHERE
    id = ?
`

type GetContainerByIDRow struct {
	ID            string
	DockerID      string
	ImageName     string
	ContainerName string
	GitRepo       sql.NullString
	UserID        string
	EnvVars       sql.NullString
	Ports         sql.NullString
	UiPort        int64
}

func (q *Queries) GetContainerByID(ctx context.Context, id string) (GetContainerByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getContainerByID, id)
	var i GetContainerByIDRow
	err := row.Scan(
		&i.ID,
		&i.DockerID,
		&i.ImageName,
		&i.ContainerName,
		&i.GitRepo,
		&i.UserID,
		&i.EnvVars,
		&i.Ports,
		&i.UiPort,
	)
	return i, err
}

const getFreePort = `-- name: GetFreePort :one
SELECT
    port
FROM
    ports
WHERE
    in_use = 0
ORDER BY
    port
LIMIT
    1
`

func (q *Queries) GetFreePort(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFreePort)
	var port int64
	err := row.Scan(&port)
	return port, err
}

const getPortByContainerID = `-- name: GetPortByContainerID :one
SELECT
    port
FROM
    ports
WHERE
    container_id = ?
`

func (q *Queries) GetPortByContainerID(ctx context.Context, containerID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPortByContainerID, containerID)
	var port int64
	err := row.Scan(&port)
	return port, err
}

const getPortCount = `-- name: GetPortCount :one
SELECT
    count(port)
FROM
    ports
`

func (q *Queries) GetPortCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPortCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const releasePortByContainer = `-- name: ReleasePortByContainer :exec
UPDATE ports
SET
    in_use = 0,
    container_id = NULL
WHERE
    container_id = ?
`

func (q *Queries) ReleasePortByContainer(ctx context.Context, containerID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, releasePortByContainer, containerID)
	return err
}

const releasePortbyPort = `-- name: ReleasePortbyPort :exec
UPDATE ports
SET
    in_use = 0,
    container_id = NULL
WHERE
    port = ?
`

func (q *Queries) ReleasePortbyPort(ctx context.Context, port int64) error {
	_, err := q.db.ExecContext(ctx, releasePortbyPort, port)
	return err
}

const updateContainer = `-- name: UpdateContainer :exec
UPDATE containers
SET
    docker_id = ?,
    image_name = ?,
    container_name = ?,
    git_repo = ?,
    user_id = ?,
    env_vars = ?,
    ports = ?
WHERE
    id = ?
`

type UpdateContainerParams struct {
	DockerID      string
	ImageName     string
	ContainerName string
	GitRepo       sql.NullString
	UserID        string
	EnvVars       sql.NullString
	Ports         sql.NullString
	ID            string
}

func (q *Queries) UpdateContainer(ctx context.Context, arg UpdateContainerParams) error {
	_, err := q.db.ExecContext(ctx, updateContainer,
		arg.DockerID,
		arg.ImageName,
		arg.ContainerName,
		arg.GitRepo,
		arg.UserID,
		arg.EnvVars,
		arg.Ports,
		arg.ID,
	)
	return err
}
