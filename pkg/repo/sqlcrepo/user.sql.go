// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package sqlcrepo

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
	users (id, username, password)
VALUES
	(?, ?, ?) RETURNING id
`

type CreateUserParams struct {
	ID       string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
	id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
	u.id,
	u.username,
	t.token
FROM
	users u
	LEFT JOIN tokens t ON u.id = t.user_id
`

type GetAllUsersRow struct {
	ID       string
	Username string
	Token    sql.NullString
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnsafeUserByUsername = `-- name: GetUnsafeUserByUsername :many
SELECT
	u.id,
	u.username,
	u.password,
	t.token
FROM
	users u
	LEFT JOIN tokens t ON u.id = t.user_id
WHERE
	username = ?
`

type GetUnsafeUserByUsernameRow struct {
	ID       string
	Username string
	Password string
	Token    sql.NullString
}

func (q *Queries) GetUnsafeUserByUsername(ctx context.Context, username string) ([]GetUnsafeUserByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnsafeUserByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnsafeUserByUsernameRow
	for rows.Next() {
		var i GetUnsafeUserByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Token,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :many
SELECT
	u.id,
	u.username,
	t.token
FROM
	users u
	LEFT JOIN tokens t ON u.id = t.user_id
WHERE
	id = ?
`

type GetUserByIDRow struct {
	ID       string
	Username string
	Token    sql.NullString
}

func (q *Queries) GetUserByID(ctx context.Context, id string) ([]GetUserByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserByIDRow
	for rows.Next() {
		var i GetUserByIDRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByToken = `-- name: GetUserByToken :many
SELECT
	u.id,
	u.username,
	t.token
FROM
	tokens t
	JOIN users u ON t.user_id = u.id
WHERE
	u.id = (
		SELECT
			user_id
		FROM
			tokens
		WHERE
			tokens.token = ?
	)
`

type GetUserByTokenRow struct {
	ID       string
	Username string
	Token    string
}

func (q *Queries) GetUserByToken(ctx context.Context, token string) ([]GetUserByTokenRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserByToken, token)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserByTokenRow
	for rows.Next() {
		var i GetUserByTokenRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Token); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
	username = ?,
	password = ?
WHERE
	id = ?
`

type UpdateUserParams struct {
	Username string
	Password string
	ID       string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.Password, arg.ID)
	return err
}
